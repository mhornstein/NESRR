The goal in this part is to predict the MI or PMI of two entities given the masked sentence in which they appeared.
This is achieved by training a deep neural network.

The experimenter script enables to sequentially execute multiple configurations for a given set of possible combination options.
It is useful for exploring and test various parameter settings in a systematic manner.

The tunable parameters are:
* score: string. can be either 'mi_score' or 'pmi_score'.
* hidden_layers_config: a list parameter that defines the structure of the hidden layers. For example, [786, 786] represents a network with two hidden layers, each having a dimension of 786.
* learning_rate: floating point representing the learning rate.
* batch_size: integer representing the batch size.
* num_epochs: integer representing epoch number.

The script requires 3 commandline arguments:
1. The path for the dataset created in part 2a.
2. The path for the embeddings created in part 2b.
3. The name of the directory in which the results will be saved (The script creates it if doesn't exist).

How to run the script?
======================
In the command prompt, type:
python experimenter.py <path to dataset> <path to embeddings> <name of result directory>
Path can be either relative or absolute.

for example:
python experimenter.py ../data/data.csv ../data/embeddings.out results
or:
python experimenter.py ../data/dummy/dummy_data.csv ../data/dummy/embeddings_dummy.out results

Script output
=============
Progress will be shown on the console.
The result directory will be generated, and inside it, one will find the following:
1. `experiments_logs.csv`: stores each experiment's ID, its configuration, and some results, such as mse loss scores.
2. Directories numbered 1, 2, ... corresponding to the experiment_id. Each directory will contain the following files:
   - `mse.jpg`: graph displaying the training and validation mse loss score over the epochs.
   - `test_predictions_results.csv`: a CSV file containing the model's results when applied to the test set.
   - `total_time.txt`: text file holding the total time required for the experiment.
   - `train_logs.csv`: a CSV file containing the raw data of the training progress used to create the mse.jpg graph.

How experiment_ids are given?
=============================
The script will automatically handle sequential experiment IDs.
If the script has been run before - it will find the previous results in the results directory (given as a parameter to the script): it will read the last used experiment ID and continue from there.
This is beneficial as it allows you to rerun the script multiple times without the need to manually reset the experiment ID.

Script configurations
=====================
To change the experimented configurations, change the configurations in the loops within the script.